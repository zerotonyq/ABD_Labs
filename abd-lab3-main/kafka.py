import os
import time
import json
import csv
from confluent_kafka import Producer

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
config = {
    'bootstrap_servers': 'localhost:29092',
    'topic': 'laba',
    'interval_seconds': 5,
    'batch_size': 5000,
    'data_folder': 'prepared'
}

producer = Producer({'bootstrap.servers': config['bootstrap_servers']})

def delivery_report(err, msg):
    if err is not None:
        print(f'‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {err}')
    else:
        print(f'‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ {msg.topic()} [{msg.partition()}]')

def get_csv_files(folder):
    return sorted(
        [os.path.join(folder, f) for f in os.listdir(folder) if f.endswith(".csv")]
    )

def file_row_generator(file_paths):
    """–ò—Ç–µ—Ä–∏—Ä—É–µ—Ç –ø–æ —Å—Ç—Ä–æ–∫–∞–º –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö –ø–æ –æ—á–µ—Ä–µ–¥–∏."""
    for file_path in file_paths:
        print(f"üìÇ –û—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª: {file_path}")
        with open(file_path, newline='', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                yield row

def main():
    print(f"üöÄ –°—Ç–∞—Ä—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Kafka-—Ç–æ–ø–∏–∫ '{config['topic']}'")
    csv_files = get_csv_files(config['data_folder'])
    row_gen = file_row_generator(csv_files)

    while True:
        sent_count = 0
        try:
            for _ in range(config['batch_size']):
                row = next(row_gen)
                message = json.dumps(row)
                producer.produce(config['topic'], message.encode('utf-8'), callback=delivery_report)
                sent_count += 1
        except StopIteration:
            print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–π–¥–µ–Ω—ã. –ü–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞...")
            row_gen = file_row_generator(csv_files)
            continue

        producer.flush()
        print(f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–∞—É–∑–∞ {config['interval_seconds']} —Å–µ–∫—É–Ω–¥...\n")
        time.sleep(config['interval_seconds'])

if __name__ == "__main__":
    main()
